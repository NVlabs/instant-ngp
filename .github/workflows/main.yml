name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_linux:
    name: Build on linux systems
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            cuda: "11.7"
            arch: 86
            python: "3.11"
          - os: ubuntu-18.04
            cuda: "10.2"
            arch: 75
            python: "3.10"
          - os: ubuntu-18.04
            cuda: "10.2"
            arch: 70
            python: "3.9"
          - os: ubuntu-18.04
            cuda: "10.2"
            arch: 61
            python: "3.8"
          - os: ubuntu-18.04
            cuda: "10.2"
            arch: 53
            python: "3.7"
          - os: ubuntu-18.04
            cuda: "10.2"
            arch: 37
            python: "3.7"
            cmake_flags: "-DNGP_BUILD_WITH_GUI=OFF -DNGP_BUILD_WITH_VULKAN=OFF -DNGP_BUILD_WITH_OPTIX=OFF"
    env:
      build_dir: "build"
      config: "Release"
      TCNN_CUDA_ARCHITECTURES: ${{ matrix.arch }}
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install build-essential python3-dev libglfw3-dev libglew-dev libxinerama-dev libxcursor-dev libxi-dev
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - run: pip install -r requirements.txt
      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: ./dependencies/cuda-cmake-github-actions/scripts/actions/install_cuda_ubuntu.sh
        shell: bash
      - name: Install Vulkan SDK
        uses: humbletim/install-vulkan-sdk@v1.1.1
      - name: CMake
        run: cmake . -B ${{ env.build_dir }} ${{ matrix.cmake_flags }} -DCMAKE_BUILD_TYPE=${{ env.config }}
      - name: Build
        working-directory: ${{ env.build_dir }}
        run: cmake --build . --target all --verbose -j `nproc`

  build_windows:
    name: Build on Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            visual_studio: "Visual Studio 16 2019"
            cuda: "11.5.1"
            arch: 86
            python: "3.11"
            recommended_gpus: "RTX-3000-and-4000"
          - os: windows-2019
            visual_studio: "Visual Studio 16 2019"
            cuda: "11.5.1"
            arch: 75
            python: "3.10"
            recommended_gpus: "RTX-2000"
          - os: windows-2019
            visual_studio: "Visual Studio 16 2019"
            cuda: "11.5.1"
            arch: 70
            python: "3.9"
          - os: windows-2019
            visual_studio: "Visual Studio 16 2019"
            cuda: "11.5.1"
            arch: 61
            python: "3.8"
            recommended_gpus: "GTX-1000"
          - os: windows-2019
            visual_studio: "Visual Studio 16 2019"
            cuda: "11.5.1"
            arch: 53
            python: "3.7"
            cmake_flags: "-DNGP_BUILD_WITH_GUI=OFF -DNGP_BUILD_WITH_VULKAN=OFF -DNGP_BUILD_WITH_OPTIX=OFF"
          - os: windows-2019
            visual_studio: "Visual Studio 16 2019"
            cuda: "11.5.1"
            arch: 37
            python: "3.7"
    env:
      build_dir: "build"
      config: "Release"
      TCNN_CUDA_ARCHITECTURES: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - run: pip install -r requirements.txt
      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
          visual_studio: ${{ matrix.visual_studio }}
        shell: powershell
        run: .\dependencies\cuda-cmake-github-actions\scripts\actions\install_cuda_windows.ps1
      - name: Install Vulkan SDK
        uses: humbletim/install-vulkan-sdk@v1.1.1
      - name: CMake
        run: cmake . -B ${{ env.build_dir }} ${{ matrix.cmake_flags }} -G "${{ matrix.visual_studio }}" -A x64
      - name: Build
        working-directory: ${{ env.build_dir }}
        run: cmake --build . --config ${{ env.config }} --target ALL_BUILD --verbose
      - name: Upload release
        if: ${{ matrix.recommended_gpus }}
        uses: actions/upload-artifact@v3
        with:
          name: Instant-NGP-for-${{ matrix.recommended_gpus }}
          path: |
            LICENSE.txt
            README.md
            requirements.txt
            cudart64*.dll
            instant-ngp.exe
            nvngx_dlss.dll
            configs/
            docs/nerf_dataset_tips.md
            docs/assets_readme/
            data/
            scripts/flip/*
            scripts/category2id.json
            scripts/colmap2nerf.py
            scripts/common.py
            scripts/convert_image.py
            scripts/download_colmap.bat
            scripts/download_ffmpeg.bat
            scripts/nerfcapture2nerf.py
            scripts/nsvf2nerf.py
            scripts/record3d2nerf.py

  continuous_release:
    name: "Update continuous development release"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build_windows]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Grab binary artifacts
        uses: actions/download-artifact@v3
      - name: Package
        run: for i in */; do zip -r "${i%/}.zip" "$i"; done
      - name: Update release
        uses: eine/tip@master
        with:
          files: "*.zip"
          rm: true
          tag: "continuous"
          token: ${{ secrets.GITHUB_TOKEN }}
